"use strict";!function(){angular.module("nix.diet-graph-directive",["nix.track-api-client","angularMoment"]).run(["$templateCache",function(t){t.put("nix.diet-graph-directive.html",'<div class="nix_diet-graph">\n          <div class="panel panel-default panel-graph">\n            <div class="panel-heading">{{vm.title}}</div>\n            <div class="panel-body text-center">\n              <div style="display: inline-block" class="heat-map-calendar">\n                <button class="previous" class="btn"><i class="fa fa-chevron-left"></i></button>\n                <button class="next" class="btn"><i class="fa fa-chevron-right"></i></button>\n                <div class="heatMap"></div>\n              </div>\n\n              <div class="row graph-summary" ng-if="vm.stats.total">\n                <div class="column">\n                  <p>Total Days Tracked</p>\n                  <strong>{{vm.stats.total}} Days</strong>\n                </div>\n                <div class="column">\n                  <p>% Days of Green</p>\n                  <strong>{{vm.stats.greenPercentage | number: 0}}%</strong>\n                </div>\n              </div>\n            </div>\n         </div>\n        </div>')}]).directive("dietGraph",["$filter","$log",function(t,e){return{templateUrl:"nix.diet-graph-directive.html",replace:!0,restrict:"AE",controllerAs:"vm",scope:{},bindToController:{api:"=?",nutrientId:"=?",target:"=?",targetCalories:"=?",enableFdaRound:"=?"},controller:["$scope","nixTrackApiClient","moment",function(t,n,a){var i=this;i.targetCalories&&e.warn('Since widget now supports multiple nutrients "targetCalories" is now deprecated, please use "target"'),i.target=i.target||i.targetCalories||2e3,i.nutrientId=i.nutrientId||208;var o={208:"total_cal",205:"total_carb",204:"total_fat",203:"total_protein",307:"total_sodium"};i.legend=[85*i.target/100,92.5*i.target/100,i.target,107.5*i.target/100,115*i.target/100],i.afterLoadDomain=function(t){i.stats.calculate(t)},i.stats={currentMonth:new Date,calculate:function(t){t=this.currentMonth=t||this.currentMonth;var e=this.currentMonthTotals={};_.each(i.calendar,function(n,i){a(1e3*i).format("YYYY-MM")===a(t).format("YYYY-MM")&&(e[i]=n)}),this.total=_.keys(e).length,this.green=_.filter(e,function(t){return t<=i.target}).length,this.greenPercentage=this.green/this.total*100},currentMonthTotals:null,total:null,green:null,greenPercentage:null},i.loadTotals=function(){n.reports.totals({begin:a().utc().subtract(1,"month").startOf("month").format("YYYY-MM-DD"),timezone:a.tz.guess()||"US/Eastern"}).success(function(t){i.calendar={},angular.forEach(t.dates,function(t){i.calendar[a(t.date).unix()]=t[o[i.nutrientId]]}),i.stats.calculate()})},i.loadTotals(),i.api={refresh:function(){return i.loadTotals()}}}],link:function(e,n,a,i){var o=new CalHeatMap,r={next:n.find(".next"),previous:n.find(".previous")},l={208:{title:"Calories",round:"calories"},205:{title:"Carb",round:"total_carb"},204:{title:"Fat",round:"total_fat"},203:{title:"Protein",round:"protein"},307:{title:"Sodium",round:"sodium"}}[i.nutrientId];i.title=a.title||"Diet Logging Graph",o.formatNumber=function(e){return i.enableFdaRound&&(e=t("fdaRound")(e,l.round)),t("number")(e,0)},o.init({tooltip:!0,itemSelector:n.find(".heatMap")[0],nextSelector:r.next[0],previousSelector:r.previous[0],domain:"month",subDomain:"x_day",subDomainTextFormat:"%d",range:1,start:new Date,minDate:new Date,maxDate:new Date,afterLoadPreviousDomain:function(t){i.afterLoadDomain(t),e.$apply()},afterLoadNextDomain:function(t){i.afterLoadDomain(t),e.$apply()},onMinDomainReached:function(t){r.previous.attr("disabled",!!t&&"disabled")},onMaxDomainReached:function(t){r.next.attr("disabled",!!t&&"disabled")},legend:i.legend,displayLegend:!0,legendHorizontalPosition:"center",cellSize:28,label:{position:"top",align:"left",offset:{x:-103,y:0}},weekStartOnMonday:!1,domainLabelFormat:"%B %Y",subDomainTitleFormat:{empty:"not tracked",filled:"{count} "+l.title}}),e.$watchCollection("vm.calendar",function(){var t=i.calendar;t&&(o.update(t),o.options.data=t,o.options.minDate=new Date(1e3*+_.min(_.keys(t))),o.onMinDomainReached(o.minDomainIsReached(1e3*moment().startOf("month").unix())))})}}}])}();